[{"table": "active_items", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.active_items(`capacityId` string, `description` string, `id` string, `lastUpdatedDate` string, `name` string, `state` string, `type` string, `workspaceId` string, `fuam_modified_at` timestamp, `fuam_deleted` boolean, `creatorUserPrincipalName` string)"}, {"table": "capacity_refreshable_details", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_refreshable_details(`CapacityId` string, `WorkspaceId` string, `ItemId` string, `ItemName` string, `RequestId` string, `LastRefreshStartDateKey` string, `Status` string, `RefreshType` string, `LastRefreshStartDate` date, `LastRefreshEndDate` date, `LastRefreshStartTime` timestamp, `LastRefreshEndTime` timestamp, `LastRefreshStartHour` string, `LastRefreshEndHour` string, `DurationInSeconds` bigint)"}, {"table": "workspaces", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.workspaces(`CapacityId` string, `WorkspaceId` string, `CapacityMigrationStatus` string, `DefaultDatasetStorageFormat` string, `Description` string, `HasWorkspaceLevelSettings` boolean, `IsOnDedicatedCapacity` boolean, `IsReadOnly` boolean, `WorkspaceName` string, `State` string, `Type` string, `fuam_modified_at` timestamp, `fuam_deleted` boolean)"}, {"table": "workspaces_scanned_users", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.workspaces_scanned_users(`WorkspaceId` string, `GroupUserAccessRight` string, `Identifier` string, `GraphId` string, `PrincipalType` string, `UserType` string)"}, {"table": "reports", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.reports(`WorkspaceId` string, `ReportType` string, `ReportId` string, `Name` string, `SemanticModelId` string, `CreatedDateTime` string, `ModifiedDateTime` string, `ModifiedById` string, `CreatedById` string, `users` string, `AppId` string, `OriginalReportObjectId` string, `description` string)"}, {"table": "environments", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.environments(`WorkspaceId` string, `EnvironmentId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "eventhouses", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.eventhouses(`WorkspaceId` string, `EventhouseId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "activities", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.activities(`CreationDate` date, `CreationDateKey` string, `CreationHour` string, `CreationMinute` string, `Activity` string, `ActivityId` string, `AggregatedWorkspaceInformation` string, `AppId` string, `AppName` string, `AppReportId` string, `ArtifactId` string, `ArtifactKind` string, `ArtifactName` string, `CapacityId` string, `CapacityName` string, `CapacityState` string, `CapacityUsers` string, `ClientIP` string, `ConsumptionMethod` string, `CopiedReportId` string, `CopiedReportName` string, `CreationTime` string, `DashboardId` string, `DashboardName` string, `DataConnectivityMode` string, `DataflowId` string, `DataflowName` string, `DataflowType` string, `DatasetId` string, `DatasetName` string, `Datasets` string, `DatasourceDetails` boolean, `DatasourceId` string, `DatasourceInformations` string, `DatasourceObjectIds` string, `DeploymentPipelineId` bigint, `DeploymentPipelineObjectId` string, `DeploymentPipelineOperationId` string, `DeploymentPipelineStageOrder` bigint, `DistributionMethod` string, `ExcludePersonalWorkspaces` boolean, `Experience` string, `ExportEventEndDateTimeParameter` string, `ExportEventStartDateTimeParameter` string, `FolderAccessRequests` string, `FolderDisplayName` string, `FolderObjectId` string, `GatewayClusterDatasources` string, `GatewayClusterId` string, `GatewayClusters` string, `GatewayClustersObjectIds` string, `GatewayId` string, `GatewayName` string, `GatewayStatus` string, `GatewayType` string, `GitIntegrationRequest` string, `Id` string, `ImportDisplayName` string, `ImportId` string, `ImportSource` string, `ImportType` string, `IncludeExpressions` boolean, `IncludeSubartifacts` boolean, `IsSuccess` boolean, `IsTenantAdminApi` boolean, `ItemId` string, `ItemName` string, `LastRefreshTime` string, `Lineage` boolean, `ModelId` string, `ModelsSnapshots` string, `Monikers` string, `ObjectDisplayName` string, `ObjectId` string, `ObjectType` string, `Operation` string, `OrgAppPermission` string, `OrganizationId` string, `OrganizationalGalleryItemDisplayName` string, `OrganizationalGalleryItemId` bigint, `OrganizationalGalleryItemPublishTime` string, `PackageId` bigint, `RecordType` bigint, `RefreshEnforcementPolicy` bigint, `RefreshType` string, `ReportId` string, `ReportMobileLayoutAction` string, `ReportName` string, `ReportType` string, `RequestId` string, `RequiredWorkspaces` string, `ResultStatus` string, `Schedules` string, `SubfolderId` bigint, `SubfolderName` string, `SubfolderObjectId` string, `SwitchState` string, `TargetWorkspaceId` string, `TenantAdminFeatureSwitchProperties` string, `TenantAdminFeatureSwitches` string, `TileText` string, `UpdateDatasourcesRequest` string, `UserAgent` string, `UserId` string, `UserInformation` string, `UserKey` string, `UserType` bigint, `WorkSpaceName` string, `Workload` string, `WorkspaceAccessList` string, `WorkspaceId` string, `WorkspacesSemicolonDelimitedList` string, `CustomVisualAccessTokenResourceId` string, `CustomVisualAccessTokenSiteUri` string, `DeploymentPipelineAccesses` string, `DeploymentPipelineDisplayName` string, `ItemsCount` string, `CredentialSetupMode` string, `DataflowRefreshScheduleType` string, `IsTemplateAppFromMarketplace` boolean, `IsUpdateAppActivity` boolean, `TemplateAppFolderObjectId` string, `TemplateAppIsInstalledWithAutomation` boolean, `TemplateAppObjectId` string, `TemplateAppOwnerTenantObjectId` string, `TemplateAppVersion` string, `TemplatePackageName` string, `BillingType` bigint, `ArtifactAccessRequestInfo` string, `ExternalResource` string)"}, {"table": "eventstreams", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.eventstreams(`WorkspaceId` string, `EventstreamId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `relations` string, `extendedProperties.EventStreamVersion` string, `extendedProperties.EnableEventStreamApiV2` double, `extendedProperties.EnableSchemaAssociation` double, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "git_connections", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.git_connections(`workspaceId` string, `repositoryName` string, `gitProviderType` string)"}, {"table": "aggregated_activities_last_30days", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.aggregated_activities_last_30days(`CreationDate` date, `CreationDateKey` string, `Activity` string, `Experience` string, `Workload` string, `CapacityId` string, `WorkspaceId` string, `ObjectType` string, `ItemId` string, `IsSuccess` boolean, `ResultStatus` string, `CountOfActivities` bigint)"}, {"table": "capacity_refreshables", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_refreshables(`CapacityId` string, `WorkspaceId` string, `ItemId` string, `ItemName` string, `IsRefreshEnabled` boolean, `LocalTimeZoneId` string, `Kind` string)"}, {"table": "capacities", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacities(`admins` array<string>, `capacityUserAccessRight` string, `displayName` string, `CapacityId` string, `region` string, `sku` string, `state` string, `users` array<string>, `fuam_modified_at` timestamp, `fuam_deleted` boolean)"}, {"table": "datasource_instances", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.datasource_instances(`DatasourceType` string, `DatasourceId` string, `GatewayId` string, `connectionDetails.server` string, `connectionDetails.database` string, `connectionDetails.sharePointSiteUrl` string, `connectionDetails.account` string, `connectionDetails.domain` string, `connectionDetails.extensionDataSourceKind` string, `connectionDetails.extensionDataSourcePath` string, `connectionDetails.path` string, `connectionDetails.url` string)"}, {"table": "capacity_refreshable_times", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_refreshable_times(`CapacityId` string, `WorkspaceId` string, `ItemId` string, `Time` string)"}, {"table": "reflexes", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.reflexes(`WorkspaceId` string, `ReflexId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `extendedProperties.Aria.DocumentId` string, `extendedProperties.Version` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "warehouses", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.warehouses(`WorkspaceId` string, `WarehouseId` string, `Name` string, `ConfiguredById` string, `ModifiedById` string, `ModifiedDateTime` string, `ModifiedDate` string)"}, {"table": "pipelines", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.pipelines(`WorkspaceId` string, `PipelineId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `relations` string, `datasourceUsages` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "tenant_settings", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.tenant_settings(`TransferDate` date, `TransferDateTime` timestamp, `canSpecifySecurityGroups` boolean, `enabled` boolean, `settingName` string, `tenantSettingGroup` string, `title` string, `delegateToCapacity` boolean, `delegateToDomain` boolean, `delegateToWorkspace` boolean)"}, {"table": "dashboards", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.dashboards(`WorkspaceId` string, `DashboardId` string, `Name` string, `tiles` string)"}, {"table": "kql_databases", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.kql_databases(`WorkspaceId` string, `KQLDatabaseId` string, `Name` string, `Description` string, `State` string, `lastUpdatedDate` string, `createdDate` string, `modifiedBy` string, `createdBy` string, `modifiedById` string, `createdById` string, `relations` string, `extendedProperties.QueryServiceUri` string, `extendedProperties.IngestionServiceUri` string, `extendedProperties.Region` string, `extendedProperties.KustoDatabaseType` string)"}, {"table": "delegated_tenant_settings_overrides", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.delegated_tenant_settings_overrides(`TransferDate` date, `TransferDateTime` timestamp, `OverrideId` string, `title` string, `delegatedFrom` string, `settingName` string, `tenantSettingGroup` string, `enabled` boolean, `CapacityId` string, `canSpecifySecurityGroups` boolean)"}, {"table": "semantic_models", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.semantic_models(`WorkspaceId` string, `SemanticModelId` string, `Name` string, `ConfiguredById` string, `isEffectiveIdentityRequired` boolean, `isEffectiveIdentityRolesRequired` boolean, `StorageMode` string, `CreatedDateTime` string, `ContentProviderType` string, `directQueryRefreshSchedule.frequency` double, `directQueryRefreshSchedule.localTimeZoneId` string, `refreshSchedule.enabled` boolean, `refreshSchedule.localTimeZoneId` string, `refreshSchedule.notifyOption` string, `description` string, `CreatedDate` string)"}, {"table": "capacity_refreshable_days", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_refreshable_days(`CapacityId` string, `WorkspaceId` string, `ItemId` string, `Day` string)"}, {"table": "lakehouses", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.lakehouses(`WorkspaceId` string, `LakehouseId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `extendedProperties.OneLakeTablesPath` string, `extendedProperties.OneLakeFilesPath` string, `extendedProperties.DwProperties` string, `relations` string, `extendedProperties.DefaultSchema` string, `datasourceUsages` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "capacity_refreshable_summaries", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_refreshable_summaries(`CapacityId` string, `WorkspaceId` string, `ItemId` string, `ItemName` string, `ConsideredStartDateKey` string, `ConsideredStartDate` date, `ConsideredEndDate` date, `ConsideredStartTime` timestamp, `ConsideredEndTime` timestamp, `RefreshAverageDuration` double, `RefreshMedianDuration` double, `RefreshCount` bigint, `ConsiderationDurationSeconds` bigint)"}, {"table": "calendar", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.calendar(`DateKey` string, `Date` string, `Date2Key` date, `Year` int, `Month` int, `Day` int, `WeekOfYear` int, `YearMonth` string, `DayOfWeek` string, `DayOfWeekNum` int, `IsCurrentYear` int, `IsPreviousYear` int, `IsCurrentQuarter` int, `IsCurrentMonth` int, `IsPreviousMonth` int, `IsInLast14Days` int, `IsInLast30Days` int)"}, {"table": "notebooks", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.notebooks(`WorkspaceId` string, `NotebookId` string, `Name` string, `Description` string, `State` string, `LastUpdatedDateTime` string, `CreatedDateTime` string, `ModifiedById` string, `CreatedById` string, `relations` string, `CreatedDate` string, `LastUpdatedDate` string)"}, {"table": "dataflows", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.dataflows(`WorkspaceId` string, `DataflowId` string, `Name` string, `ModifiedDateTime` string, `datasourceUsages` string, `Generation` double)"}, {"table": "capacity_regions", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_regions(`Continent` string, `FabricRegion` string, `Latitude` double, `Longitude` double, `Location` string)"}, {"table": "tenant_settings_enabledsecuritygroups", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.tenant_settings_enabledsecuritygroups(`settingName` string, `TransferDateTime` timestamp, `graphId` string, `name` string)"}, {"table": "capacity_users", "create_sql": "CREATE TABLE IF NOT EXISTS FUAM_Lakehouse.capacity_user)"}]